apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: "true"
  name: system:cloud-controller-manager
rules:
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - '*'
  - apiGroups:
      - ""
    resources:
      - nodes/status
    verbs:
      - patch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - services/status
    verbs:
      - list
      - patch
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - persistentvolumes
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - create
      - get
      - list
      - watch
      - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cloud-controller-manager:apiserver-authentication-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:cloud-controller-manager
#  name: extension-apiserver-authentication-reader

subjects:
  - kind: ServiceAccount
    name: cloud-controller-manager
    namespace: kube-system

#---
#apiVersion: rbac.authorization.k8s.io/v1
#kind: RoleBinding
#metadata:
#  name: cloud-controller-manager:apiserver-authentication-reader
#  namespace: kube-system
#roleRef:
#  apiGroup: rbac.authorization.k8s.io
#  kind: Role
#  name: extension-apiserver-authentication-reader
#subjects:
#  - apiGroup: ""
#    kind: ServiceAccount
#    name: cloud-controller-manager
#    namespace: kube-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cds-cloud-controller-manager
  namespace: kube-system
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: cds-cloud-controller-manager
  template:
    metadata:
#      annotations:
#        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        app: cds-cloud-controller-manager
    spec:
      containers:
        - args:
            - --leader-elect=false
            - --cloud-provider=cdscloud
          env:
            - name: EKS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: access_key_id
                  name: cck-secrets
            - name: EKS_ACCESS_KEY_SECRET
              valueFrom:
                secretKeyRef:
                  key: access_key_secret
                  name: cck-secrets
            - name: CDS_CLUSTER_ID
              valueFrom:
                configMapKeyRef:
                  key: k8s_cluster_id
                  name: cds-properties
            - name: CDS_REGION
              valueFrom:
                configMapKeyRef:
                  key: site_id
                  name: cds-properties
            - name: CDS_OVERSEA
              valueFrom:
                configMapKeyRef:
                  name: cds-properties
                  key: oversea
          #image: registry-bj.capitalonline.net/cck/cdscloud-controller-manager:v1.0.4
#          image: eks-cloud-controller-manager:v1.0.0
          image: eks-cloud-controller-manager:v1.0.0
          imagePullPolicy: IfNotPresent
          name: cds-cloud-controller-manager
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
      dnsPolicy: Default
      hostNetwork: true
      serviceAccountName: cloud-controller-manager
#      tolerations:
#        - effect: NoSchedule
#          key: node.cloudprovider.kubernetes.io/uninitialized
#          operator: Exists
#        - effect: NoSchedule
#          key: node-role.kubernetes.io/master
#          operator: Exists
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
      tolerations:
        - operator: Exists
          effect: NoSchedule
